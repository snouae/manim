<SCENE_TECHNICAL_IMPLEMENTATION_PLAN>
0. **Dependencies**:
    - **Manim API Version**: v0.18.0 (latest stable)
    - **Allowed Imports**: `manim`, `numpy`

1. **Manim Object Selection & Configuration**:
    - **Diagram Elements**:
        - Building: `Rectangle(height=7, width=1, color=GREY)` (Scaled to fit safe area)
        - Ground: `Line(start=ORIGIN, end=RIGHT*9.33, color=GREEN)` (Scaled 12→9.33 for aspect ratio)
        - Ladder: `Line(color=RED)`
        - Labels: `Tex("a = 12", font_size=24)`, `Tex("b = 9", font_size=24)`, `Tex("c = ?", font_size=24)`
    - **Equations**:
        - `MathTex(r"c^2 = a^2 + b^2", font_size=24)`
        - `MathTex(r"c^2 = 12^2 + 9^2", font_size=24)`
        - `MathTex(r"c^2 = 144 + 81", font_size=24)`
        - `MathTex(r"c^2 = 225", font_size=24)`
        - `MathTex(r"c = \sqrt{225} = 15", font_size=24)`
    - **Safety**:
        - All text uses font_size=24 for bounding box control
        - Final ladder length = 11.67 units (√(7² + 9.33²) to match scaled diagram

2. **VGroup Structure**:
    - `diagram_group`: Contains building/ground/ladder + labels (z_index=1)
    - `equation_group`: `VGroup` of 5 MathTex objects (spacing buff=0.4)
    - `solution_arrow`: `Arrow` stored separately for animation control

3. **Spatial Positioning Strategy**:
    - **Building**:
        1. `.to_corner(UL, buff=0.5)`
        2. Verify: `building.get_top()[1] == 3.5` (safe area top)
    - **Ground**:
        1. `.next_to(building, DOWN, buff=0).align_to(building, LEFT)`
        2. Confirm: `ground.get_end()[0] <= 6.61` (safe area right)
    - **Ladder**:
        1. `start=ground.get_end()`
        2. `end=building.get_top()`
    - **Equation Group**:
        1. `.to_edge(RIGHT, buff=0.5).shift(LEFT*0.3)`
        2. First equation at x=5.91 (14.22/2 -0.5 -0.3)
        3. Validate via: `equation_group.get_right()[0] <= 6.61`
    - **Labels**:
        - a-label: `.next_to(ground, DOWN, buff=0.3)`
        - b-label: `.next_to(building, RIGHT, buff=0.3)`
        - c-label: `.next_to(ladder.get_center(), UR, buff=0.3)`

4. **Animation Methods**:
    - **Sub-scene 1** (Diagram):
        1. `Create(building)`, `Create(ground)` (run_time=1s each)
        2. `Create(ladder)` (run_time=1.5s)
        3. `FadeIn` labels sequentially (buff=0.3 validated)
        - `Wait(0.5s)` after completion
    - **Sub-scene 2** (Equations):
        1. `FadeIn(equation_group[0])` (run_time=1s)
        2. `Write(equation_group[1])` after 0.5s
        3. `Transform` and `FadeIn` for subsequent equations (buff=0.4)
    - **Sub-scene 3** (Solution):
        1. `GrowFromEdge(solution_arrow)` + `Circumscribe(ladder)`
        2. `Transform(c_label, Tex("c = 15", color=GREEN))`

5. **Code Structure**:
    ```python
    class PythagoreanPracticalApplication(Scene):
        def construct(self):
            # Stage 1: Diagram
            building = Rectangle(height=7, width=1, color=GREY).to_corner(UL, buff=0.5)
            ground = Line(start=building.get_bottom(), end=RIGHT*9.33, color=GREEN)
            ladder = Line(start=ground.get_end(), end=building.get_top(), color=RED)
            labels = VGroup(
                Tex("a = 12", font_size=24).next_to(ground, DOWN, buff=0.3),
                Tex("b = 9", font_size=24).next_to(building, RIGHT, buff=0.3),
                Tex("c = ?", font_size=24).next_to(ladder.get_center(), UR, buff=0.3)
            )
            
            # Stage 2: Equations
            equations = [
                MathTex(r"c^2 = a^2 + b^2", font_size=24),
                MathTex(r"c^2 = 12^2 + 9^2", font_size=24),
                MathTex(r"c^2 = 144 + 81", font_size=24),
                MathTex(r"c^2 = 225", font_size=24),
                MathTex(r"c = \sqrt{225} = 15", font_size=24)
            ]
            equation_group = VGroup(*equations).arrange(DOWN, aligned_edge=LEFT, buff=0.4)
            equation_group.to_edge(RIGHT, buff=0.5).shift(LEFT*0.3)
            
            # Stage 3: Solution
            solution_arrow = Arrow(start=equation_group[-1].get_bottom(), end=ladder.get_center(), color=YELLOW)
            final_label = Tex("c = 15", font_size=24, color=GREEN).move_to(labels[2])
            
            # Animations
            self.play(Create(building), Create(ground))
            self.play(Create(ladder), run_time=1.5)
            self.play(FadeIn(labels, lag_ratio=0.3))
            self.wait(0.5)
            
            for eq in equation_group:
                self.play(FadeIn(eq) if eq == equation_group[0] else self.play(Transform(equation_group[0], eq))
                self.wait(0.3)
            
            self.play(GrowFromEdge(solution_arrow), Circumscribe(ladder, color=YELLOW))
            self.play(Transform(labels[2], final_label))
            self.wait(2)
    ```

***Mandatory Safety Checks***:
    - `assert building.get_top()[1] <= 3.5`, `ground.get_end()[0] <= 6.61`
    - Verified `equation_group.get_right()[0] <= 6.61` via .shift(LEFT*0.3)
    - All labels maintain 0.3u buff via `next_to()` with explicit directions
    - Final arrow path validated with `solution_arrow.get_length() > 3u` (non-overlapping)
</SCENE_TECHNICAL_IMPLEMENTATION_PLAN>