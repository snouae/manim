# Scene 1 Implementation Plan

<SCENE_VISION_STORYBOARD_PLAN>
[SCENE_VISION]
1.  **Scene Overview**:
    - Establishes foundational understanding of right-angled triangles through geometric visualization. Serves as the critical visual reference point for all subsequent theorem explanations.
    - **Visual learning objectives**: Use `Polygon` for triangle construction, `Tex` labels for side identification, and `RightAngle` marker for angle visualization. Maintain spatial hierarchy through relative positioning and animation sequencing.
    - Manim visuals use `VGroup` to maintain label/triangle relationships, `FadeIn` animations for progressive revelation, and color coding (BLUE/RED) to distinguish legs from hypotenuse. Strict adherence to 0.5-unit margins enforced through `.scale(0.6).move_to(ORIGIN)` positioning.
    - Key concepts emphasized: Right angle visualization (gold square marker), hypotenuse as longest side (RED label), and spatial relationship between legs/hypotenuse through label placement buffers.

[STORYBOARD]
1.  **Visual Flow & Pacing**:
    - **Sub-scene 1**: Triangle Construction
        - **Visual Element**: Right-angled `Polygon` (vertices at ORIGIN, RIGHT*3, UP*2)
        - Animation Sequence:
            1. `Create(triangle)` with `run_time=2` (gold stroke, stroke_width=4)
            2. Add `RightAngle` marker (size=0.4) at ORIGIN using `FadeIn` (gold fill)
            3. `Wait(0.5)` buffer
    - **Sub-scene 2**: Side Labeling
        - **Visual Element**: `Tex` labels "a", "b", "c" (BLUE, BLUE, RED)
        - Animation Sequence:
            1. Label "a" (BLUE): `.next_to(triangle.get_left_side(), LEFT, buff=0.3)`, `FadeIn`
            2. Label "b" (BLUE): `.next_to(triangle.get_bottom_side(), DOWN, buff=0.3)`, `FadeIn`
            3. Label "c" (RED): `.next_to(triangle.hypotenuse, UP, buff=0.3).rotate(angle=-33.69°)` (matches slope), `FadeIn`
            4. `Wait(1)` for absorption
    - **Sub-scene 3**: Angle Clarification
        - **Visual Element**: `MathTex(r"90^\circ")` (gold) with `Arrow`
        - Animation Sequence:
            1. `Circumscribe(right_angle_marker)` (gold, `run_time=1.5`)
            2. `MathTex` label `.next_to(right_angle_marker, UR, buff=0.3)`, `Write`
            3. Curved `Arrow` from label to angle marker (`tip_length=0.2`, `color=GOLD`) with `ShowCreation`
            4. `Wait(1)` pause
    - **Sub-scene 4**: Terminology Reveal
        - **Visual Element**: `Tex` labels "Legs", "Hypotenuse" (positioned via VGroup)
        - Animation Sequence:
            1. Group legs labels (a,b) into `VGroup`. `FlashAround(legs_vgroup, color=BLUE)`
            2. `Tex(r"\text{Legs}")`.next_to(triangle, LEFT, buff=1.2), `FadeIn` (BLUE)
            3. `CurvedArrow` from "c" label to hypotenuse `.add_tip()`, `ShowCreation`
            4. `Tex(r"\text{Hypotenuse}")`.next_to(triangle, RIGHT, buff=1.2), `FadeIn` (RED)
            5. Final `Wait(2)` for retention

**Positioning Enforcement**:
- Triangle scaled to 60% vertical space: `.scale(0.6).move_to(ORIGIN)`
- All labels maintain 0.3u buffer from geometric elements
- Terminology text positioned 1.2u from triangle edges to respect safe margins
- Angle marker placed with 0u buffer (integral to triangle) but 0.3u from 90° label

**Style Specs**:
- Triangle: `stroke_color=GOLD`, `stroke_width=4`
- Labels: `font_size=36` (side), `28` (terminology)
- Arrows: `stroke_width=3`, `tip_length=0.15`

**Common Mistake Prevention**:
- Using `Polygon` instead of `Triangle` for proper right-angle proportions
- Label rotation matched to hypotenuse slope via `arctan(2/3) ≈ 33.69°`
</SCENE_VISION_STORYBOARD_PLAN>

<SCENE_TECHNICAL_IMPLEMENTATION_PLAN>
0. **Dependencies**:
    - **Manim API Version**: v0.18.0 (Community Edition)
    - **Allowed Imports**: `manim`, `numpy`

1. **Manim Object Selection & Configuration**:
    - **Triangle**: `Polygon(ORIGIN, [3,0,0], [0,2,0])` with `stroke_color=GOLD`, `stroke_width=4`
    - **Angle Marker**: `RightAngle(line1, line2, length=0.4, color=GOLD, stroke_width=3)`
    - **Labels**: 
        - `Tex("a", color=BLUE, font_size=36).next_to(left_side, LEFT, buff=0.3)`
        - `Tex("b", color=BLUE, font_size=36).next_to(bottom_side, DOWN, buff=0.3)`
        - `Tex("c", color=RED, font_size=36).next_to(hypotenuse, UP, buff=0.3).rotate(-33.69*DEGREES)`
    - **Angle Label**: `MathTex(r"90^\circ", color=GOLD, font_size=28).next_to(angle_marker, UR, buff=0.3)`
    - **Terminology**: 
        - `Tex(r"\text{Legs}", color=BLUE, font_size=28).next_to(triangle, LEFT, buff=1.2)`
        - `Tex(r"\text{Hypotenuse}", color=RED, font_size=28).next_to(triangle, RIGHT, buff=1.2)`
    - **Arrows**: `CurvedArrow(start=terminology_legs, end=label_c, angle=-TAU/4, color=GOLD, stroke_width=3)`

2. **VGroup Structure**:
    - `triangle_group = VGroup(triangle, angle_marker)` - Core geometry
    - `label_group = VGroup(label_a, label_b, label_c)` - Side identifiers
    - `terminology_group = VGroup(legs_text, hypotenuse_text)` - Explanatory text

3. **Spatial Positioning Strategy**:
    - **Stage 1**: Base Triangle
        - `triangle.scale(0.6).move_to(ORIGIN)`
        - Verify: `triangle.get_corner(DR)[0] < 3.5` (safe area X-axis check)
    - **Stage 2**: Side Labels
        - `label_a.next_to(triangle.get_left_side(), LEFT, buff=0.3)`
        - `label_b.next_to(triangle.get_bottom_side(), DOWN, buff=0.3)`
        - `label_c.next_to(triangle.get_hypotenuse(), UP, buff=0.3).rotate(-np.arctan(2/3))`
        - Check: `label_c.get_top()[1] < 3.5` (vertical safe area)
    - **Stage 3**: Terminology
        - `legs_text.next_to(triangle, LEFT, buff=1.2).align_to(triangle, UP)`
        - `hypotenuse_text.next_to(triangle, RIGHT, buff=1.2).align_to(triangle, DOWN)`
        - Validate: `legs_text.get_left()[0] > -6.5` (left margin)

4. **Animation Sequence**:
    ```python
    def construct(self):
        # Sub-scene 1: Triangle Construction
        tri = self.create_triangle()
        angle_marker = RightAngle(tri.sides[0], tri.sides[1], color=GOLD)
        self.play(Create(tri), run_time=2)
        self.play(FadeIn(angle_marker))
        self.wait(0.5)
        
        # Sub-scene 2: Side Labels
        labels = self.add_labels(tri)
        self.play(
            LaggedStart(
                FadeIn(labels[0]),
                FadeIn(labels[1]),
                FadeIn(labels[2]),
                lag_ratio=0.3
            )
        )
        self.wait(1)
        
        # Sub-scene 3: Angle Clarification
        angle_label, arrow = self.add_angle_annotation(angle_marker)
        self.play(Circumscribe(angle_marker, color=GOLD))
        self.play(Write(angle_label), Create(arrow))
        self.wait(1)
        
        # Sub-scene 4: Terminology
        terms = self.add_terminology()
        self.play(
            FlashAround(labels[:2], color=BLUE),
            FadeIn(terms[0]),
            Create(terms[2]),
            FadeIn(terms[1])
        )
        self.wait(2)
    ```

5. **Safety Enforcement**:
    - **Bounding Box Protection**:
        - All text objects use `font_size=36/28` per recommendations
        - Multi-line text uses `.arrange(DOWN, buff=0.2)`
    - **Margin Validation**:
        - Post-placement check: `self.add(always_redraw(lambda: SurroundingRectangle(mobject).set_color(GREEN))`
    - **Spacing Guarantees**:
        - Minimum `buff=0.3` in all `.next_to()` calls
        - Group spacing enforced via `VGroup.arrange()`

***Mandatory Safety Checks***:
    - Pre-render assertions for all mobject positions using `mobject.get_center()`
    - Debug grid overlay using `self.add(NumberPlane().set_opacity(0.2))`
    - Final render dimensions: 14.22×8 (16:9) with 0.5u safe area
</SCENE_TECHNICAL_IMPLEMENTATION_PLAN>

<SCENE_ANIMATION_NARRATION_PLAN>

[ANIMATION_STRATEGY]
1. **Pedagogical Animation Plan:**
    - **VGroup Transitions:**
        1. `triangle_group` (VGroup containing triangle + angle marker)
           - Transition: `FadeIn` over 2s during triangle construction
           - Rationale: Gradual reveal establishes spatial reference point for all subsequent elements
        2. `label_group` (VGroup of side labels)
           - Transition: `LaggedStart` with 0.3s interval between label appearances
           - Rationale: Progressive labeling prevents cognitive overload while emphasizing side relationships
        3. `terminology_group` (Legs/Hypotenuse text)
           - Transition: `AnimationGroup` with simultaneous FlashAround and FadeIn
           - Rationale: Links visual labels to mathematical terminology through coordinated emphasis

    - **Element Animations:**
        - **Triangle Construction (Sub-scene 1):**
            1. `Create(triangle)` over 2s (Gold stroke)
               - Pedagogical Purpose: Establishes core geometric shape as visual foundation
            2. `FadeIn(angle_marker)` over 0.5s
               - Pedagogical Purpose: Highlights defining characteristic of right-angled triangles

        - **Side Labeling (Sub-scene 2):**
            1. Sequential `FadeIn` of labels a(0.5s) → b(0.5s) → c(0.75s)
               - Pedagogical Purpose: Reinforces side identification sequence (legs → hypotenuse)
            2. Label c rotation (-33.69°)
               - Pedagogical Purpose: Matches hypotenuse slope for spatial accuracy

        - **Angle Clarification (Sub-scene 3):**
            1. `Circumscribe(angle_marker)` over 1.5s (Gold highlight)
               - Pedagogical Purpose: Reinforces 90° concept through visual emphasis
            2. Simultaneous `Write(angle_label)` and `Create(arrow)` over 1s
               - Pedagogical Purpose: Connects symbolic notation (90°) to geometric feature

        - **Terminology Reveal (Sub-scene 4):**
            1. `FlashAround(legs_labels)` over 0.8s (Blue emphasis)
               - Pedagogical Purpose: Groups related elements for conceptual understanding
            2. Coordinated `FadeIn` of "Legs" text and curved arrow over 1s
               - Pedagogical Purpose: Establishes relationship between symbols and terminology
            3. `FadeIn("Hypotenuse")` with red emphasis over 1s
               - Pedagogical Purpose: Contrasts special status of hypotenuse through color coding

2. **Scene Flow - Pedagogical Pacing:**
    - **Animation Sequence:**
        1. Foundation Phase (3.5s): Triangle + angle marker establishment
        2. Labeling Phase (2.75s): Gradual side identification
        3. Conceptual Phase (3.5s): Angle explanation and terminology
        4. Synthesis Phase (4s): Final terminology integration

    - **Transition Buffers:**
        1. 0.5s after triangle creation
           - Purpose: Allows initial shape recognition before introducing labels
        2. 1s after side labeling
           - Purpose: Creates pause before introducing angle measurement concept
        3. 2s final buffer
           - Purpose: Enables retention of key terms before scene transition

    - **Narration Sync Strategy:**
        - Critical animation-narration pairs:
            1. "This special angle..." syncs with angle marker circumscription
            2. "We call these sides..." matches FlashAround legs labels
            3. "The hypotenuse..." coincides with red text fade-in
        - 300ms audio lead before visual emphasis for natural attention guidance

[NARRATION]
**Pedagogical Narration Script:**
[00:00] "At the heart of the Pythagorean theorem lies a fundamental shape - the right-angled triangle. [Triangle creation begins] Let's construct one with two perpendicular sides meeting at a 90-degree angle. [Angle marker fades in] This special angle is what defines all right-angled triangles and determines their unique properties."

[00:02.5] "Every right-angled triangle has three key components. [Label a fades in] We call the two shorter sides that form the right angle the 'legs' - let's label them 'a' and 'b'. [Label b fades in] The third side, [Label c rotates into place] which always sits opposite the right angle, has a special name - can you guess what it might be?"

[00:05] "That's right - we call this longest side the hypotenuse, labeled 'c'. [Red hypotenuse label emphasis] Remember this distinction: legs create the right angle, while the hypotenuse always opposes it. [Curved arrow appears] This relationship remains constant in every right-angled triangle you'll encounter."

[00:07.5] "Let's solidify these terms. [Flash around legs] The 'legs' (a and b) form the foundation of the triangle, [Legs text appears] while the 'hypotenuse' (c) [Hypotenuse text appears] acts as the connecting bridge between them. In our next exploration, we'll discover how these three sides relate mathematically through the Pythagorean theorem."

**Narration Sync - Pedagogical Alignment:**
- **Precision Timing:** Angle marker narration ("90-degree angle") begins 0.3s before marker fade-in completion, using human speech anticipation to focus attention
- **Concept Reinforcement:** "Longest side" vocal emphasis coincides with label c's rotation completion, leveraging visual-spatial learning
- **Terminal Pause:** Final 2s silence after "Pythagorean theorem" mention creates deliberate space for concept integration before scene transition

</SCENE_ANIMATION_NARRATION_PLAN>

