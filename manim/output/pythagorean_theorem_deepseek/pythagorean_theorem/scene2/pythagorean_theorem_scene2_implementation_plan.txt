# Scene 2 Implementation Plan

<SCENE_VISION_STORYBOARD_PLAN>
[SCENE_VISION]
1.  **Scene Overview**:
    - This scene visually demonstrates the Pythagorean theorem by constructing squares on each side of a right-angled triangle, showing their area relationships. It builds on Scene 1's triangle to create geometric intuition for a² + b² = c².
    - **Visual learning objectives**: Use `Polygon` for the triangle, `Square`/`Rectangle` for side squares, `MathTex` labels for areas, and `VGroup` for grouped animations. Emphasize spatial relationships between geometric shapes and their algebraic representations.
    - Manim visuals will use color-coded squares with synchronized animations to show how smaller areas combine. `Transform` animations will merge squares visually. `VGroup` ensures proper spacing and collective animations.
    - Key concepts: Geometric interpretation of algebraic terms, conservation of area. Use color hierarchy (BLUE/RED for legs, GOLD for hypotenuse) and spatial isolation of squares to direct attention.

[STORYBOARD]
1.  **Visual Flow & Pacing**:
    - Sub-scene 1: Base Triangle & Square Construction
      - Visual Element: Right-angled `Polygon` (Scene 1's triangle) at ORIGIN
      - Animation Sequence:
        1. `FadeIn` triangle (preserved from Scene 1)
        2. Create `Square` on side 'a' (LEFT): 
           - `square_a = Square(side_length=1).next_to(triangle, LEFT, buff=0.3)`
           - `Create(square_a, color=BLUE, run_time=1)`
        3. Create `Square` on side 'b' (DOWN): 
           - `square_b = Square(side_length=1.5).next_to(triangle, DOWN, buff=0.3)`
           - `Create(square_b, color=RED, run_time=1)`
        4. Create `Square` on hypotenuse 'c' (UR): 
           - `square_c = Square(side_length=sqrt(3.25)).next_to(triangle, UR, buff=0.3)`
           - `Create(square_c, color=GOLD, run_time=1)`
        - Spacing: All squares maintain 0.3u buffer from triangle edges

    - Sub-scene 2: Area Labeling
      - Visual Element: `MathTex` labels centered in squares
      - Animation Sequence:
        1. Add `a² = MathTex("a^2").move_to(square_a.get_center())`
           - `Write(a², color=WHITE)`
        2. Add `b² = MathTex("b^2").move_to(square_b.get_center())`
           - `Write(b², color=WHITE)`
        3. Add `c² = MathTex("c^2").move_to(square_c.get_center())`
           - `Write(c², color=WHITE)`
        - Spacing: Labels centered within squares (no overlap)

    - Sub-scene 3: Highlighting Leg Squares
      - Visual Element: Color emphasis and equation setup
      - Animation Sequence:
        1. `Circumscribe(square_a, color=BLUE, run_time=1)`
        2. `Circumscribe(square_b, color=RED, run_time=1)`
        3. Create equation: `sum_tex = MathTex("a^2 + b^2").next_to(triangle, UP, buff=0.5)`
           - `Write(sum_tex, color=WHITE)`
        - Spacing: Equation 0.5u above triangle (safe area compliant)

    - Sub-scene 4: Visual Merging
      - Visual Element: `VGroup` transformation
      - Animation Sequence:
        1. Group leg squares: `leg_group = VGroup(square_a, square_b)`
        2. Animate `leg_group.animate(run_time=2).move_to(square_c.get_center()).scale(0.5)`
        3. `Transform(sum_tex, c².copy().move_to(sum_tex), run_time=1.5)`
        4. Final `Flash(square_c, color=GOLD, run_time=1)`
        - Spacing: Transformed group remains within square_c's bounds

    - Transitions: 
      - `Wait(0.5)` between sub-scenes
      - All objects maintain 0.3u spacing from scene edges (safe area)
</SCENE_VISION_STORYBOARD_PLAN>

<SCENE_TECHNICAL_IMPLEMENTATION_PLAN>
0. **Dependencies**:
    - **Manim API Version**: v0.18.0 (stable)
    - **Allowed Imports**: `manim`, `numpy as np`

1. **Manim Object Selection & Configuration**:
    - **Triangle**: 
        ```python
        triangle = Polygon(
            ORIGIN, RIGHT*1.5, UP*1, 
            color=WHITE
        ).move_to(ORIGIN)
        ```
    - **Squares**:
        ```python
        square_a = Square(side_length=1, color=BLUE)
        square_b = Square(side_length=1.5, color=RED)
        square_c = Square(side_length=np.sqrt(3.25), color=GOLD)
        ```
    - **Labels** (Font size 24, white):
        ```python
        a_sq = MathTex("a^2", font_size=24, color=WHITE)
        b_sq = MathTex("b^2", font_size=24, color=WHITE)
        c_sq = MathTex("c^2", font_size=24, color=WHITE)
        ```
    - **Equation**:
        ```python
        sum_tex = MathTex("a^2 + b^2", font_size=28, color=WHITE)
        ```

2. **VGroup Structure**:
    ```python
    leg_group = VGroup(square_a, square_b)  # For collective animations
    label_group = VGroup(a_sq, b_sq, c_sq)  # Area labels
    ```

3. **Spatial Positioning Strategy**:
    - **Triangle Centering**:
        ```python
        triangle.move_to(ORIGIN).shift(DOWN*0.15)  # Compensate for label space
        ```
    - **Square Positioning**:
        ```python
        square_a.next_to(triangle, LEFT, buff=0.3)
        square_b.next_to(triangle, DOWN, buff=0.3)
        square_c.next_to(triangle, UR, buff=0.3)
        ```
    - **Label Positioning**:
        ```python
        a_sq.move_to(square_a.get_center())
        b_sq.move_to(square_b.get_center())
        c_sq.move_to(square_c.get_center())
        ```
    - **Equation Positioning**:
        ```python
        sum_tex.next_to(triangle, UP, buff=0.5)
        ```
    - **Safety Checks**:
        - Verify all objects with `get_corner(DR)`/`get_corner(UL)` stay within 0.5u margins
        - Use `get_coord=1.3` checks for text bounding boxes

4. **Animation Sequence**:
    ```python
    # Sub-scene 1
    self.play(FadeIn(triangle))
    self.play(
        Create(square_a), 
        Create(square_b), 
        Create(square_c),
        lag_ratio=0.2
    )
    self.wait(0.5)
    
    # Sub-scene 2
    self.play(
        Write(a_sq), 
        Write(b_sq), 
        Write(c_sq),
        run_time=1.5
    )
    self.wait(0.5)
    
    # Sub-scene 3
    self.play(
        Circumscribe(square_a),
        Circumscribe(square_b),
        run_time=1.5
    )
    self.play(Write(sum_tex))
    self.wait(0.5)
    
    # Sub-scene 4
    self.play(
        leg_group.animate.move_to(square_c.get_center()).scale(0.5),
        Transform(sum_tex, c_sq.copy().move_to(sum_tex)),
        run_time=2
    )
    self.play(Flash(square_c))
    ```

5. **Code Structure**:
    ```python
    class VisualizingTheorem(Scene):
        def construct(self):
            # Object creation
            triangle = Polygon(...)
            # ... (all object definitions)
            
            # Positioning
            triangle.move_to(...)
            # ... (all positioning logic)
            
            # Animation sequence
            # ... (sub-scene blocks with waits)
            
            # Final safety checks via debug methods
            if debug:
                self.add(ScreenRectangle().set_color(RED))  # Safe area visualization
    ```

***Mandatory Safety Checks***:
    - All objects verified with `debug=True` scene rendering
    - Text scale factors applied where needed: `a_sq.scale(0.8)` if overflow detected
    - Final positions confirmed with `np.linalg.norm(obj.get_center()) < 3.5`
</SCENE_TECHNICAL_IMPLEMENTATION_PLAN>

<SCENE_ANIMATION_NARRATION_PLAN>

[ANIMATION_STRATEGY]
1. **Pedagogical Animation Plan:**
    - **Sub-scene 1: Base Triangle & Square Construction (Run Time: 3.5s)**
        1. `FadeIn(triangle)` (1s) - Reintroduces Scene 1's triangle using familiar visual context
        2. Sequential `Create()` for squares (3x1s with 0.2 lag):
           - Blue square LEFT: Establishes 'a' side relationship
           - Red square DOWN: Creates spatial contrast with 'b' side
           - Gold square UR: Positions hypotenuse square diagonally for visual separation
    
    - **Sub-scene 2: Area Labeling (Run Time: 2.5s)**
        1. Simultaneous `Write()` of area labels (1.5s):
           - White text ensures visibility against colored squares
           - Centered positioning reinforces area concept
        2. 0.5s pause for visual absorption
    
    - **Sub-scene 3: Highlighting Leg Squares (Run Time: 3s)**
        1. Dual `Circumscribe()` animations (1.5s):
           - Blue/red flashes create association between legs and their squares
        2. `Write(sum_tex)` UP (1s):
           - Positions equation in negative space above triangle
           - White text maintains focus on mathematical relationship
    
    - **Sub-scene 4: Visual Merging (Run Time: 4s)**
        1. `VGroup` transformation (2s):
           - Leg squares scale/move to hypotenuse position
           - 50% scaling demonstrates area equivalence through spatial adjustment
        2. Equation `Transform()` (1.5s):
           - Morphs sum into c² for algebraic continuity
        3. `Flash()` (0.5s):
           - Gold emphasis confirms hypotenuse as solution space

2. **Scene Flow - Pedagogical Pacing and Clarity:**
    - **Animation Sequence:**
        1. Foundation (3.5s): Build geometric context
        2. Quantification (2.5s): Add algebraic meaning
        3. Hypothesis (3s): Suggest additive relationship
        4. Proof (4s): Demonstrate equivalence
    
    - **Transition Buffers:**
        1. 0.5s after square creation: Let viewers process spatial relationships
        2. 0.5s after labels: Allow formula recognition
        3. 0.5s before merging: Create anticipation
    
    - **Narration Sync:**
        - Critical animation starts (square creation, label writes) begin 0.2s after narration cue
        - Equation reveals sync with verbal "sum" statement
        - Flash coincides with "exactly matches" vocal emphasis

[NARRATION]
- **Pedagogical Narration Script:**
    "[0.0s] Building on our right-angled triangle from before, let's explore its hidden geometric relationship. *[FadeIn triangle]*  
    
    [1.2s] If we construct squares on each side... *[Square_a appears]* ...here on side 'a'... *[Square_b appears]* ...and here on side 'b'... *[Square_c appears]* ...and finally on the hypotenuse 'c'.  
    
    [4.5s] Each square's area is exactly the square of its side length. *[Labels write]* So we have a², b², and c².  
    
    [7.0s] Now, watch carefully - *[Circumscribe animations]* the areas of the smaller squares... *[Equation appears]* ...when combined through addition...  
    
    [9.5s] Can they relate to the hypotenuse square? *[VGroup movement starts]* Let's test this visually.  
    
    [11.0s] Remarkably, *[Transformation completes]* the combined areas of a² and b²... *[Flash]* ...fit perfectly into the c² space! This geometric truth is exactly what the Pythagorean theorem expresses."

- **Narration Sync - Pedagogical Alignment:**
    - Formula mentions timed with label appearances (Δ±0.1s)
    - "Combined through addition" syncs with equation write
    - Rhetorical question ("Can they relate?") during transformation anticipation pause
    - "Fit perfectly" coincides with flash for audiovisual reinforcement

</SCENE_ANIMATION_NARRATION_PLAN>

